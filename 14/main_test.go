package main

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

/// ---------------------------------------------------------------------------
///   countElements
/// ---------------------------------------------------------------------------

func Test_countElements(t *testing.T) {
	input := "NCNBCHB"
	expected := map[rune]int{
		'N': 2,
		'C': 2,
		'B': 2,
		'H': 1,
	}

	output := countElements(input)

	assert.Equal(t, expected, output)
}

/// ---------------------------------------------------------------------------
///   createPolymer
/// ---------------------------------------------------------------------------

func Test_createPolymer(t *testing.T) {
	polymerChain := "NNCB"
	pairInput := []string{
		"CH -> B",
		"HH -> N",
		"CB -> H",
		"NH -> C",
		"HB -> C",
		"HC -> B",
		"HN -> C",
		"NN -> C",
		"BH -> H",
		"NC -> B",
		"NB -> B",
		"BN -> B",
		"BB -> N",
		"BC -> B",
		"CC -> N",
		"CN -> C",
	}

	expected := Polymer{
		chain: polymerChain,
		pairInserts: map[string]string{
			"CH": "B",
			"HH": "N",
			"CB": "H",
			"NH": "C",
			"HB": "C",
			"HC": "B",
			"HN": "C",
			"NN": "C",
			"BH": "H",
			"NC": "B",
			"NB": "B",
			"BN": "B",
			"BB": "N",
			"BC": "B",
			"CC": "N",
			"CN": "C",
		},
	}

	output := createPolymer(polymerChain, pairInput)

	assert.Equal(t, expected, output)
}

/// ---------------------------------------------------------------------------
///   Polymer - Process
/// ---------------------------------------------------------------------------

func Test_Polymer_Process_Once(t *testing.T) {
	polymerChain := "NNCB"
	pairInput := []string{
		"CH -> B", "HH -> N", "CB -> H", "NH -> C", "HB -> C", "HC -> B", "HN -> C", "NN -> C", "BH -> H", "NC -> B", "NB -> B", "BN -> B", "BB -> N", "BC -> B", "CC -> N", "CN -> C",
	}
	expected := "NCNBCHB"

	polymer := createPolymer(polymerChain, pairInput)

	polymer.Process()

	assert.Equal(t, expected, polymer.chain)
}

/// ---------------------------------------------------------------------------
///   getInput
/// ---------------------------------------------------------------------------

func Test_getINput(t *testing.T) {
	filename := "input_test.txt"
	expectedChain := "NNCB"
	expectedPairs := []string{
		"CH -> B",
		"HH -> N",
		"CB -> H",
		"NH -> C",
		"HB -> C",
		"HC -> B",
		"HN -> C",
		"NN -> C",
		"BH -> H",
		"NC -> B",
		"NB -> B",
		"BN -> B",
		"BB -> N",
		"BC -> B",
		"CC -> N",
		"CN -> C",
	}

	outputChain, outputPairs := getInput(filename)

	assert.Equal(t, expectedChain, outputChain)
	assert.Equal(t, expectedPairs, outputPairs)
}

func Test_Polymer_ProcessSteps_Test_10Steps(t *testing.T) {
	inputfile := "input_test.txt"
	chain, pairs := getInput(inputfile)
	polymer := createPolymer(chain, pairs)
	steps := 10
	expected

	polymer.ProcessSteps(steps)

	assert.Equal(t, expected, polymer.chain)
}
